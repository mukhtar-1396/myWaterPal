<div class="transbox" >
<div id="trackerContent" >
<div id="horizontal-progress-bar" >
<progress id="progress" value='0' max='100' > </progress >
</div >
<div class="buttons" >
<a class='button btn btn-default' data-bind='click: resetClicks' data-diff='-100' > Reset</a >
<a class='button btn btn-default' data-bind='click: registerClick' data-diff='13' > + </a >
</div >
<div > You've drank <span data-bind='text: numberOfClicks'>&nbsp;</span> cup(s) today!</div>
<script >
// We use consts here for the keys for good practice, and to make sure the key is always correct
const WATER_CONSUMED = 'waterConsumed';
const CUPS_CONSUMED = 'cupsConsumed';
/**
             * This ensures the dom is ready before executing the code
             * https://learn.jquery.com/using-jquery-core/document-ready/
             */
$(function () {
                setAndAnimateProgress(getLocalStorage(WATER_CONSUMED));
                ko.applyBindings(new ClickCounterViewModel());
            });
/**
             * gets Local Storage Value
             * @param key
             * @returns {number}
             */
const getLocalStorage = (key) = > {
    let waterConsumed = localStorage.getItem(key);
    // if undefined, meaning no key exists... if (!waterConsumed)

{
    localStorage .setItem(key, '0');
    return 0;
}

// convert value stored as a string to a number
return parseInt(waterConsumed, 10);
}

;
/**
             * sets Local Storage Value
             * @param key
             * @param amount
             */
const setLocalStorage = (key, amount) = > {
    localStorage .setItem(key, amount.toString());
}

;
/**
             * sets and animates the water value
             * @param value
             */
const setAndAnimateProgress = (value) = > {
    $("#progress").animate({value}, 500);
}

;
// changing progressbar when button is clicked
$(".button").click(function () {
                animateProgress(parseInt($(this).data('diff')));
            });
/**
             * animate progress by a step indicated by diff
             * @param diff
             */
function animateProgress(diff) {
    // var currValue = $("#progress").val();
    var currValue = getLocalStorage(WATER_CONSUMED);
    var toValue = currValue + diff;
    toValue = toValue < 0 ? 0 : toValue;
    toValue = toValue > 100 ? 100 : toValue;
    setLocalStorage(WATER_CONSUMED, toValue);
    setAndAnimateProgress(toValue);
}
/**
             * display number of cups drank today
             * @constructor
             */
var ClickCounterViewModel = function () {
    this .numberOfClicks = ko.observable(getLocalStorage(CUPS_CONSUMED));
    this .registerClick = function ()

{
    const cupsConsumed = this.numberOfClicks() + 1;
    this .numberOfClicks(cupsConsumed);
    setLocalStorage(CUPS_CONSUMED, cupsConsumed);
}

;
this.resetClicks = function () {
    this .numberOfClicks(0);
    setLocalStorage(CUPS_CONSUMED, 0);
}

;
this.hasClickedTooManyTimes = ko.pureComputed(function () {
                    return this.numberOfClicks();
                }, this);
}
;
</script >
</div >
</div >
